/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.repository.generate.tables.daos;


import com.hieplp.recipe.user.repository.generate.tables.pojos.Password;
import com.hieplp.recipe.user.repository.generate.tables.records.PasswordRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.LocalDateTime;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PasswordDao extends DAOImpl<PasswordRecord, Password, String> {

    /**
     * Create a new PasswordDao without any configuration
     */
    public PasswordDao() {
        super(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD, Password.class);
    }

    /**
     * Create a new PasswordDao with an attached configuration
     */
    public PasswordDao(Configuration configuration) {
        super(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD, Password.class, configuration);
    }

    @Override
    public String getId(Password object) {
        return object.getUserid();
    }

    /**
     * Fetch records that have <code>userId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Password> fetchRangeOfUserid(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userId IN (values)</code>
     */
    public List<Password> fetchByUserid(String... values) {
        return fetch(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.USERID, values);
    }

    /**
     * Fetch a unique record that has <code>userId = value</code>
     */
    public Password fetchOneByUserid(String value) {
        return fetchOne(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.USERID, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Password> fetchRangeOfPassword(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.PASSWORD_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<Password> fetchByPassword(byte[]... values) {
        return fetch(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.PASSWORD_, values);
    }

    /**
     * Fetch records that have <code>salt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Password> fetchRangeOfSalt(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.SALT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>salt IN (values)</code>
     */
    public List<Password> fetchBySalt(byte[]... values) {
        return fetch(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.SALT, values);
    }

    /**
     * Fetch records that have <code>createdBy BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Password> fetchRangeOfCreatedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.CREATEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdBy IN (values)</code>
     */
    public List<Password> fetchByCreatedby(String... values) {
        return fetch(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.CREATEDBY, values);
    }

    /**
     * Fetch records that have <code>createdAt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Password> fetchRangeOfCreatedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.CREATEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdAt IN (values)</code>
     */
    public List<Password> fetchByCreatedat(LocalDateTime... values) {
        return fetch(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.CREATEDAT, values);
    }

    /**
     * Fetch records that have <code>modifiedBy BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Password> fetchRangeOfModifiedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.MODIFIEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modifiedBy IN (values)</code>
     */
    public List<Password> fetchByModifiedby(String... values) {
        return fetch(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.MODIFIEDBY, values);
    }

    /**
     * Fetch records that have <code>modifiedAt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Password> fetchRangeOfModifiedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.MODIFIEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modifiedAt IN (values)</code>
     */
    public List<Password> fetchByModifiedat(LocalDateTime... values) {
        return fetch(com.hieplp.recipe.user.repository.generate.tables.Password.PASSWORD.MODIFIEDAT, values);
    }
}
