/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.common.repository.generate.tables;


import com.hieplp.recipe.user.common.repository.generate.Keys;
import com.hieplp.recipe.user.common.repository.generate.User;
import com.hieplp.recipe.user.common.repository.generate.tables.records.SnapshotEventEntryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SnapshotEventEntry extends TableImpl<SnapshotEventEntryRecord> {

    /**
     * The reference instance of <code>user.snapshot_event_entry</code>
     */
    public static final SnapshotEventEntry SNAPSHOT_EVENT_ENTRY = new SnapshotEventEntry();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>user.snapshot_event_entry.aggregate_identifier</code>.
     */
    public final TableField<SnapshotEventEntryRecord, String> AGGREGATE_IDENTIFIER = createField(DSL.name("aggregate_identifier"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.snapshot_event_entry.sequence_number</code>.
     */
    public final TableField<SnapshotEventEntryRecord, Long> SEQUENCE_NUMBER = createField(DSL.name("sequence_number"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>user.snapshot_event_entry.type</code>.
     */
    public final TableField<SnapshotEventEntryRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.snapshot_event_entry.event_identifier</code>.
     */
    public final TableField<SnapshotEventEntryRecord, String> EVENT_IDENTIFIER = createField(DSL.name("event_identifier"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.snapshot_event_entry.meta_data</code>.
     */
    public final TableField<SnapshotEventEntryRecord, byte[]> META_DATA = createField(DSL.name("meta_data"), SQLDataType.BLOB.defaultValue(DSL.inline("NULL", SQLDataType.BLOB)), this, "");
    /**
     * The column <code>user.snapshot_event_entry.payload</code>.
     */
    public final TableField<SnapshotEventEntryRecord, byte[]> PAYLOAD = createField(DSL.name("payload"), SQLDataType.BLOB.nullable(false), this, "");
    /**
     * The column <code>user.snapshot_event_entry.payload_revision</code>.
     */
    public final TableField<SnapshotEventEntryRecord, String> PAYLOAD_REVISION = createField(DSL.name("payload_revision"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.snapshot_event_entry.payload_type</code>.
     */
    public final TableField<SnapshotEventEntryRecord, String> PAYLOAD_TYPE = createField(DSL.name("payload_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.snapshot_event_entry.time_stamp</code>.
     */
    public final TableField<SnapshotEventEntryRecord, String> TIME_STAMP = createField(DSL.name("time_stamp"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private SnapshotEventEntry(Name alias, Table<SnapshotEventEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SnapshotEventEntry(Name alias, Table<SnapshotEventEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user.snapshot_event_entry</code> table reference
     */
    public SnapshotEventEntry(String alias) {
        this(DSL.name(alias), SNAPSHOT_EVENT_ENTRY);
    }

    /**
     * Create an aliased <code>user.snapshot_event_entry</code> table reference
     */
    public SnapshotEventEntry(Name alias) {
        this(alias, SNAPSHOT_EVENT_ENTRY);
    }

    /**
     * Create a <code>user.snapshot_event_entry</code> table reference
     */
    public SnapshotEventEntry() {
        this(DSL.name("snapshot_event_entry"), null);
    }

    public <O extends Record> SnapshotEventEntry(Table<O> child, ForeignKey<O, SnapshotEventEntryRecord> key) {
        super(child, key, SNAPSHOT_EVENT_ENTRY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SnapshotEventEntryRecord> getRecordType() {
        return SnapshotEventEntryRecord.class;
    }

    @Override
    public Schema getSchema() {
        return User.USER;
    }

    @Override
    public UniqueKey<SnapshotEventEntryRecord> getPrimaryKey() {
        return Keys.KEY_SNAPSHOT_EVENT_ENTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<SnapshotEventEntryRecord>> getKeys() {
        return Arrays.<UniqueKey<SnapshotEventEntryRecord>>asList(Keys.KEY_SNAPSHOT_EVENT_ENTRY_PRIMARY, Keys.KEY_SNAPSHOT_EVENT_ENTRY_UK_E1UUCJSEO68GOPMND0VGDL44H);
    }

    @Override
    public SnapshotEventEntry as(String alias) {
        return new SnapshotEventEntry(DSL.name(alias), this);
    }

    @Override
    public SnapshotEventEntry as(Name alias) {
        return new SnapshotEventEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SnapshotEventEntry rename(String name) {
        return new SnapshotEventEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SnapshotEventEntry rename(Name name) {
        return new SnapshotEventEntry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, Long, String, String, byte[], byte[], String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
