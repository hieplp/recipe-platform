/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.common.repository.generate.tables.daos;


import com.hieplp.recipe.user.common.repository.generate.tables.pojos.User;
import com.hieplp.recipe.user.common.repository.generate.tables.records.UserRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.LocalDateTime;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UserDao extends DAOImpl<UserRecord, User, String> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_, User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_, User.class, configuration);
    }

    @Override
    public String getId(User object) {
        return object.getUserid();
    }

    /**
     * Fetch records that have <code>userId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfUserid(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userId IN (values)</code>
     */
    public List<User> fetchByUserid(String... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.USERID, values);
    }

    /**
     * Fetch a unique record that has <code>userId = value</code>
     */
    public User fetchOneByUserid(String value) {
        return fetchOne(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.USERID, value);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<User> fetchByUsername(String... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public User fetchOneByUsername(String value) {
        return fetchOne(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.USERNAME, value);
    }

    /**
     * Fetch records that have <code>fullName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfFullname(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.FULLNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fullName IN (values)</code>
     */
    public List<User> fetchByFullname(String... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.FULLNAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<User> fetchByEmail(String... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.EMAIL, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfStatus(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<User> fetchByStatus(Byte... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.STATUS, values);
    }

    /**
     * Fetch records that have <code>createdBy BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfCreatedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.CREATEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdBy IN (values)</code>
     */
    public List<User> fetchByCreatedby(String... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.CREATEDBY, values);
    }

    /**
     * Fetch records that have <code>createdAt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfCreatedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.CREATEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdAt IN (values)</code>
     */
    public List<User> fetchByCreatedat(LocalDateTime... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.CREATEDAT, values);
    }

    /**
     * Fetch records that have <code>modifiedBy BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfModifiedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.MODIFIEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modifiedBy IN (values)</code>
     */
    public List<User> fetchByModifiedby(String... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.MODIFIEDBY, values);
    }

    /**
     * Fetch records that have <code>modifiedAt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfModifiedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.MODIFIEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modifiedAt IN (values)</code>
     */
    public List<User> fetchByModifiedat(LocalDateTime... values) {
        return fetch(com.hieplp.recipe.user.common.repository.generate.tables.User.USER_.MODIFIEDAT, values);
    }
}
