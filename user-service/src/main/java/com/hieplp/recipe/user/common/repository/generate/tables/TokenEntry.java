/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.common.repository.generate.tables;


import com.hieplp.recipe.user.common.repository.generate.Keys;
import com.hieplp.recipe.user.common.repository.generate.User;
import com.hieplp.recipe.user.common.repository.generate.tables.records.TokenEntryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TokenEntry extends TableImpl<TokenEntryRecord> {

    /**
     * The reference instance of <code>user.token_entry</code>
     */
    public static final TokenEntry TOKEN_ENTRY = new TokenEntry();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>user.token_entry.processor_name</code>.
     */
    public final TableField<TokenEntryRecord, String> PROCESSOR_NAME = createField(DSL.name("processor_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.token_entry.segment</code>.
     */
    public final TableField<TokenEntryRecord, Integer> SEGMENT = createField(DSL.name("segment"), SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>user.token_entry.owner</code>.
     */
    public final TableField<TokenEntryRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.token_entry.timestamp</code>.
     */
    public final TableField<TokenEntryRecord, String> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.token_entry.token</code>.
     */
    public final TableField<TokenEntryRecord, byte[]> TOKEN = createField(DSL.name("token"), SQLDataType.BLOB.defaultValue(DSL.inline("NULL", SQLDataType.BLOB)), this, "");
    /**
     * The column <code>user.token_entry.token_type</code>.
     */
    public final TableField<TokenEntryRecord, String> TOKEN_TYPE = createField(DSL.name("token_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    private TokenEntry(Name alias, Table<TokenEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TokenEntry(Name alias, Table<TokenEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user.token_entry</code> table reference
     */
    public TokenEntry(String alias) {
        this(DSL.name(alias), TOKEN_ENTRY);
    }

    /**
     * Create an aliased <code>user.token_entry</code> table reference
     */
    public TokenEntry(Name alias) {
        this(alias, TOKEN_ENTRY);
    }

    /**
     * Create a <code>user.token_entry</code> table reference
     */
    public TokenEntry() {
        this(DSL.name("token_entry"), null);
    }

    public <O extends Record> TokenEntry(Table<O> child, ForeignKey<O, TokenEntryRecord> key) {
        super(child, key, TOKEN_ENTRY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenEntryRecord> getRecordType() {
        return TokenEntryRecord.class;
    }

    @Override
    public Schema getSchema() {
        return User.USER;
    }

    @Override
    public UniqueKey<TokenEntryRecord> getPrimaryKey() {
        return Keys.KEY_TOKEN_ENTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<TokenEntryRecord>> getKeys() {
        return Arrays.<UniqueKey<TokenEntryRecord>>asList(Keys.KEY_TOKEN_ENTRY_PRIMARY);
    }

    @Override
    public TokenEntry as(String alias) {
        return new TokenEntry(DSL.name(alias), this);
    }

    @Override
    public TokenEntry as(Name alias) {
        return new TokenEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenEntry rename(String name) {
        return new TokenEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenEntry rename(Name name) {
        return new TokenEntry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, Integer, String, String, byte[], String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
