/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.common.repository.generate.tables;


import com.hieplp.recipe.user.common.repository.generate.Indexes;
import com.hieplp.recipe.user.common.repository.generate.Keys;
import com.hieplp.recipe.user.common.repository.generate.User;
import com.hieplp.recipe.user.common.repository.generate.tables.records.DeadLetterEntryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DeadLetterEntry extends TableImpl<DeadLetterEntryRecord> {

    /**
     * The reference instance of <code>user.dead_letter_entry</code>
     */
    public static final DeadLetterEntry DEAD_LETTER_ENTRY = new DeadLetterEntry();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>user.dead_letter_entry.dead_letter_id</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> DEAD_LETTER_ID = createField(DSL.name("dead_letter_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.cause_message</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> CAUSE_MESSAGE = createField(DSL.name("cause_message"), SQLDataType.VARCHAR(1023).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.dead_letter_entry.cause_type</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> CAUSE_TYPE = createField(DSL.name("cause_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.dead_letter_entry.diagnostics</code>.
     */
    public final TableField<DeadLetterEntryRecord, byte[]> DIAGNOSTICS = createField(DSL.name("diagnostics"), SQLDataType.BLOB.defaultValue(DSL.inline("NULL", SQLDataType.BLOB)), this, "");
    /**
     * The column <code>user.dead_letter_entry.enqueued_at</code>.
     */
    public final TableField<DeadLetterEntryRecord, LocalDateTime> ENQUEUED_AT = createField(DSL.name("enqueued_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.last_touched</code>.
     */
    public final TableField<DeadLetterEntryRecord, LocalDateTime> LAST_TOUCHED = createField(DSL.name("last_touched"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>user.dead_letter_entry.aggregate_identifier</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> AGGREGATE_IDENTIFIER = createField(DSL.name("aggregate_identifier"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.dead_letter_entry.event_identifier</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> EVENT_IDENTIFIER = createField(DSL.name("event_identifier"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.message_type</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> MESSAGE_TYPE = createField(DSL.name("message_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.meta_data</code>.
     */
    public final TableField<DeadLetterEntryRecord, byte[]> META_DATA = createField(DSL.name("meta_data"), SQLDataType.BLOB.defaultValue(DSL.inline("NULL", SQLDataType.BLOB)), this, "");
    /**
     * The column <code>user.dead_letter_entry.payload</code>.
     */
    public final TableField<DeadLetterEntryRecord, byte[]> PAYLOAD = createField(DSL.name("payload"), SQLDataType.BLOB.nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.payload_revision</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> PAYLOAD_REVISION = createField(DSL.name("payload_revision"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.dead_letter_entry.payload_type</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> PAYLOAD_TYPE = createField(DSL.name("payload_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.sequence_number</code>.
     */
    public final TableField<DeadLetterEntryRecord, Long> SEQUENCE_NUMBER = createField(DSL.name("sequence_number"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "");
    /**
     * The column <code>user.dead_letter_entry.time_stamp</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> TIME_STAMP = createField(DSL.name("time_stamp"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.token</code>.
     */
    public final TableField<DeadLetterEntryRecord, byte[]> TOKEN = createField(DSL.name("token"), SQLDataType.BLOB.defaultValue(DSL.inline("NULL", SQLDataType.BLOB)), this, "");
    /**
     * The column <code>user.dead_letter_entry.token_type</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> TOKEN_TYPE = createField(DSL.name("token_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.dead_letter_entry.type</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.dead_letter_entry.processing_group</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> PROCESSING_GROUP = createField(DSL.name("processing_group"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.processing_started</code>.
     */
    public final TableField<DeadLetterEntryRecord, LocalDateTime> PROCESSING_STARTED = createField(DSL.name("processing_started"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>user.dead_letter_entry.sequence_identifier</code>.
     */
    public final TableField<DeadLetterEntryRecord, String> SEQUENCE_IDENTIFIER = createField(DSL.name("sequence_identifier"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.dead_letter_entry.sequence_index</code>.
     */
    public final TableField<DeadLetterEntryRecord, Long> SEQUENCE_INDEX = createField(DSL.name("sequence_index"), SQLDataType.BIGINT.nullable(false), this, "");

    private DeadLetterEntry(Name alias, Table<DeadLetterEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeadLetterEntry(Name alias, Table<DeadLetterEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user.dead_letter_entry</code> table reference
     */
    public DeadLetterEntry(String alias) {
        this(DSL.name(alias), DEAD_LETTER_ENTRY);
    }

    /**
     * Create an aliased <code>user.dead_letter_entry</code> table reference
     */
    public DeadLetterEntry(Name alias) {
        this(alias, DEAD_LETTER_ENTRY);
    }

    /**
     * Create a <code>user.dead_letter_entry</code> table reference
     */
    public DeadLetterEntry() {
        this(DSL.name("dead_letter_entry"), null);
    }

    public <O extends Record> DeadLetterEntry(Table<O> child, ForeignKey<O, DeadLetterEntryRecord> key) {
        super(child, key, DEAD_LETTER_ENTRY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeadLetterEntryRecord> getRecordType() {
        return DeadLetterEntryRecord.class;
    }

    @Override
    public Schema getSchema() {
        return User.USER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEAD_LETTER_ENTRY_IDXE67WCX5FIQ9HL4Y4QKHLCJ9CG, Indexes.DEAD_LETTER_ENTRY_IDXRWUCPGS6SN93LDGOEH2Q9K6BN);
    }

    @Override
    public UniqueKey<DeadLetterEntryRecord> getPrimaryKey() {
        return Keys.KEY_DEAD_LETTER_ENTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<DeadLetterEntryRecord>> getKeys() {
        return Arrays.<UniqueKey<DeadLetterEntryRecord>>asList(Keys.KEY_DEAD_LETTER_ENTRY_PRIMARY, Keys.KEY_DEAD_LETTER_ENTRY_UKHLR8IO86J74QY298XF720N16V);
    }

    @Override
    public DeadLetterEntry as(String alias) {
        return new DeadLetterEntry(DSL.name(alias), this);
    }

    @Override
    public DeadLetterEntry as(Name alias) {
        return new DeadLetterEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DeadLetterEntry rename(String name) {
        return new DeadLetterEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DeadLetterEntry rename(Name name) {
        return new DeadLetterEntry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, String, byte[], LocalDateTime, LocalDateTime, String, String, String, byte[], byte[], String, String, Long, String, byte[], String, String, String, LocalDateTime, String, Long> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
