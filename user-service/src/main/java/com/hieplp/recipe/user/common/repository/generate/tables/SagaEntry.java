/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.common.repository.generate.tables;


import com.hieplp.recipe.user.common.repository.generate.Keys;
import com.hieplp.recipe.user.common.repository.generate.User;
import com.hieplp.recipe.user.common.repository.generate.tables.records.SagaEntryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SagaEntry extends TableImpl<SagaEntryRecord> {

    /**
     * The reference instance of <code>user.saga_entry</code>
     */
    public static final SagaEntry SAGA_ENTRY = new SagaEntry();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>user.saga_entry.saga_id</code>.
     */
    public final TableField<SagaEntryRecord, String> SAGA_ID = createField(DSL.name("saga_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>user.saga_entry.revision</code>.
     */
    public final TableField<SagaEntryRecord, String> REVISION = createField(DSL.name("revision"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.saga_entry.saga_type</code>.
     */
    public final TableField<SagaEntryRecord, String> SAGA_TYPE = createField(DSL.name("saga_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>user.saga_entry.serialized_saga</code>.
     */
    public final TableField<SagaEntryRecord, byte[]> SERIALIZED_SAGA = createField(DSL.name("serialized_saga"), SQLDataType.BLOB.defaultValue(DSL.inline("NULL", SQLDataType.BLOB)), this, "");

    private SagaEntry(Name alias, Table<SagaEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SagaEntry(Name alias, Table<SagaEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user.saga_entry</code> table reference
     */
    public SagaEntry(String alias) {
        this(DSL.name(alias), SAGA_ENTRY);
    }

    /**
     * Create an aliased <code>user.saga_entry</code> table reference
     */
    public SagaEntry(Name alias) {
        this(alias, SAGA_ENTRY);
    }

    /**
     * Create a <code>user.saga_entry</code> table reference
     */
    public SagaEntry() {
        this(DSL.name("saga_entry"), null);
    }

    public <O extends Record> SagaEntry(Table<O> child, ForeignKey<O, SagaEntryRecord> key) {
        super(child, key, SAGA_ENTRY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SagaEntryRecord> getRecordType() {
        return SagaEntryRecord.class;
    }

    @Override
    public Schema getSchema() {
        return User.USER;
    }

    @Override
    public UniqueKey<SagaEntryRecord> getPrimaryKey() {
        return Keys.KEY_SAGA_ENTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<SagaEntryRecord>> getKeys() {
        return Arrays.<UniqueKey<SagaEntryRecord>>asList(Keys.KEY_SAGA_ENTRY_PRIMARY);
    }

    @Override
    public SagaEntry as(String alias) {
        return new SagaEntry(DSL.name(alias), this);
    }

    @Override
    public SagaEntry as(Name alias) {
        return new SagaEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SagaEntry rename(String name) {
        return new SagaEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SagaEntry rename(Name name) {
        return new SagaEntry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
