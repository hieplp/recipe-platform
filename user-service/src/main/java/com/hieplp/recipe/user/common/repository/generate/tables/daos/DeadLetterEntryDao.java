/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.common.repository.generate.tables.daos;


import com.hieplp.recipe.user.common.repository.generate.tables.DeadLetterEntry;
import com.hieplp.recipe.user.common.repository.generate.tables.records.DeadLetterEntryRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.LocalDateTime;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DeadLetterEntryDao extends DAOImpl<DeadLetterEntryRecord, com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry, String> {

    /**
     * Create a new DeadLetterEntryDao without any configuration
     */
    public DeadLetterEntryDao() {
        super(DeadLetterEntry.DEAD_LETTER_ENTRY, com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry.class);
    }

    /**
     * Create a new DeadLetterEntryDao with an attached configuration
     */
    public DeadLetterEntryDao(Configuration configuration) {
        super(DeadLetterEntry.DEAD_LETTER_ENTRY, com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry.class, configuration);
    }

    @Override
    public String getId(com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry object) {
        return object.getDeadLetterId();
    }

    /**
     * Fetch records that have <code>dead_letter_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfDeadLetterId(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.DEAD_LETTER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dead_letter_id IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByDeadLetterId(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.DEAD_LETTER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>dead_letter_id = value</code>
     */
    public com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry fetchOneByDeadLetterId(String value) {
        return fetchOne(DeadLetterEntry.DEAD_LETTER_ENTRY.DEAD_LETTER_ID, value);
    }

    /**
     * Fetch records that have <code>cause_message BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfCauseMessage(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.CAUSE_MESSAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cause_message IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByCauseMessage(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.CAUSE_MESSAGE, values);
    }

    /**
     * Fetch records that have <code>cause_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfCauseType(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.CAUSE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cause_type IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByCauseType(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.CAUSE_TYPE, values);
    }

    /**
     * Fetch records that have <code>diagnostics BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfDiagnostics(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.DIAGNOSTICS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>diagnostics IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByDiagnostics(byte[]... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.DIAGNOSTICS, values);
    }

    /**
     * Fetch records that have <code>enqueued_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfEnqueuedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.ENQUEUED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enqueued_at IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByEnqueuedAt(LocalDateTime... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.ENQUEUED_AT, values);
    }

    /**
     * Fetch records that have <code>last_touched BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfLastTouched(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.LAST_TOUCHED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_touched IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByLastTouched(LocalDateTime... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.LAST_TOUCHED, values);
    }

    /**
     * Fetch records that have <code>aggregate_identifier BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfAggregateIdentifier(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.AGGREGATE_IDENTIFIER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>aggregate_identifier IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByAggregateIdentifier(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.AGGREGATE_IDENTIFIER, values);
    }

    /**
     * Fetch records that have <code>event_identifier BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfEventIdentifier(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.EVENT_IDENTIFIER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>event_identifier IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByEventIdentifier(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.EVENT_IDENTIFIER, values);
    }

    /**
     * Fetch records that have <code>message_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfMessageType(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.MESSAGE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>message_type IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByMessageType(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.MESSAGE_TYPE, values);
    }

    /**
     * Fetch records that have <code>meta_data BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfMetaData(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.META_DATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta_data IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByMetaData(byte[]... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.META_DATA, values);
    }

    /**
     * Fetch records that have <code>payload BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfPayload(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.PAYLOAD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payload IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByPayload(byte[]... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.PAYLOAD, values);
    }

    /**
     * Fetch records that have <code>payload_revision BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfPayloadRevision(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.PAYLOAD_REVISION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payload_revision IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByPayloadRevision(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.PAYLOAD_REVISION, values);
    }

    /**
     * Fetch records that have <code>payload_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfPayloadType(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.PAYLOAD_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payload_type IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByPayloadType(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.PAYLOAD_TYPE, values);
    }

    /**
     * Fetch records that have <code>sequence_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfSequenceNumber(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.SEQUENCE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sequence_number IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchBySequenceNumber(Long... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.SEQUENCE_NUMBER, values);
    }

    /**
     * Fetch records that have <code>time_stamp BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfTimeStamp(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.TIME_STAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time_stamp IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByTimeStamp(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.TIME_STAMP, values);
    }

    /**
     * Fetch records that have <code>token BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfToken(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.TOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByToken(byte[]... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.TOKEN, values);
    }

    /**
     * Fetch records that have <code>token_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfTokenType(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.TOKEN_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token_type IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByTokenType(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.TOKEN_TYPE, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByType(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.TYPE, values);
    }

    /**
     * Fetch records that have <code>processing_group BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfProcessingGroup(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.PROCESSING_GROUP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>processing_group IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByProcessingGroup(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.PROCESSING_GROUP, values);
    }

    /**
     * Fetch records that have <code>processing_started BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfProcessingStarted(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.PROCESSING_STARTED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>processing_started IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchByProcessingStarted(LocalDateTime... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.PROCESSING_STARTED, values);
    }

    /**
     * Fetch records that have <code>sequence_identifier BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfSequenceIdentifier(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.SEQUENCE_IDENTIFIER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sequence_identifier IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchBySequenceIdentifier(String... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.SEQUENCE_IDENTIFIER, values);
    }

    /**
     * Fetch records that have <code>sequence_index BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchRangeOfSequenceIndex(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DeadLetterEntry.DEAD_LETTER_ENTRY.SEQUENCE_INDEX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sequence_index IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.DeadLetterEntry> fetchBySequenceIndex(Long... values) {
        return fetch(DeadLetterEntry.DEAD_LETTER_ENTRY.SEQUENCE_INDEX, values);
    }
}
