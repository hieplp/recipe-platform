/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.common.repository.generate.tables.daos;


import com.hieplp.recipe.user.common.repository.generate.tables.TokenEntry;
import com.hieplp.recipe.user.common.repository.generate.tables.records.TokenEntryRecord;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TokenEntryDao extends DAOImpl<TokenEntryRecord, com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry, Record2<String, Integer>> {

    /**
     * Create a new TokenEntryDao without any configuration
     */
    public TokenEntryDao() {
        super(TokenEntry.TOKEN_ENTRY, com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry.class);
    }

    /**
     * Create a new TokenEntryDao with an attached configuration
     */
    public TokenEntryDao(Configuration configuration) {
        super(TokenEntry.TOKEN_ENTRY, com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry.class, configuration);
    }

    @Override
    public Record2<String, Integer> getId(com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry object) {
        return compositeKeyRecord(object.getProcessorName(), object.getSegment());
    }

    /**
     * Fetch records that have <code>processor_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchRangeOfProcessorName(String lowerInclusive, String upperInclusive) {
        return fetchRange(TokenEntry.TOKEN_ENTRY.PROCESSOR_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>processor_name IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchByProcessorName(String... values) {
        return fetch(TokenEntry.TOKEN_ENTRY.PROCESSOR_NAME, values);
    }

    /**
     * Fetch records that have <code>segment BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchRangeOfSegment(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TokenEntry.TOKEN_ENTRY.SEGMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>segment IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchBySegment(Integer... values) {
        return fetch(TokenEntry.TOKEN_ENTRY.SEGMENT, values);
    }

    /**
     * Fetch records that have <code>owner BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchRangeOfOwner(String lowerInclusive, String upperInclusive) {
        return fetchRange(TokenEntry.TOKEN_ENTRY.OWNER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>owner IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchByOwner(String... values) {
        return fetch(TokenEntry.TOKEN_ENTRY.OWNER, values);
    }

    /**
     * Fetch records that have <code>timestamp BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchRangeOfTimestamp(String lowerInclusive, String upperInclusive) {
        return fetchRange(TokenEntry.TOKEN_ENTRY.TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timestamp IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchByTimestamp(String... values) {
        return fetch(TokenEntry.TOKEN_ENTRY.TIMESTAMP, values);
    }

    /**
     * Fetch records that have <code>token BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchRangeOfToken(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(TokenEntry.TOKEN_ENTRY.TOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchByToken(byte[]... values) {
        return fetch(TokenEntry.TOKEN_ENTRY.TOKEN, values);
    }

    /**
     * Fetch records that have <code>token_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchRangeOfTokenType(String lowerInclusive, String upperInclusive) {
        return fetchRange(TokenEntry.TOKEN_ENTRY.TOKEN_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token_type IN (values)</code>
     */
    public List<com.hieplp.recipe.user.common.repository.generate.tables.pojos.TokenEntry> fetchByTokenType(String... values) {
        return fetch(TokenEntry.TOKEN_ENTRY.TOKEN_TYPE, values);
    }
}
