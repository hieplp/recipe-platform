/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.user.common.repository.generate.tables;


import com.hieplp.recipe.user.common.repository.generate.User;
import com.hieplp.recipe.user.common.repository.generate.tables.records.HibernateSequenceRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class HibernateSequence extends TableImpl<HibernateSequenceRecord> {

    /**
     * The reference instance of <code>user.hibernate_sequence</code>
     */
    public static final HibernateSequence HIBERNATE_SEQUENCE = new HibernateSequence();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>user.hibernate_sequence.next_val</code>.
     */
    public final TableField<HibernateSequenceRecord, Long> NEXT_VAL = createField(DSL.name("next_val"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "");

    private HibernateSequence(Name alias, Table<HibernateSequenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private HibernateSequence(Name alias, Table<HibernateSequenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user.hibernate_sequence</code> table reference
     */
    public HibernateSequence(String alias) {
        this(DSL.name(alias), HIBERNATE_SEQUENCE);
    }

    /**
     * Create an aliased <code>user.hibernate_sequence</code> table reference
     */
    public HibernateSequence(Name alias) {
        this(alias, HIBERNATE_SEQUENCE);
    }

    /**
     * Create a <code>user.hibernate_sequence</code> table reference
     */
    public HibernateSequence() {
        this(DSL.name("hibernate_sequence"), null);
    }

    public <O extends Record> HibernateSequence(Table<O> child, ForeignKey<O, HibernateSequenceRecord> key) {
        super(child, key, HIBERNATE_SEQUENCE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HibernateSequenceRecord> getRecordType() {
        return HibernateSequenceRecord.class;
    }

    @Override
    public Schema getSchema() {
        return User.USER;
    }

    @Override
    public HibernateSequence as(String alias) {
        return new HibernateSequence(DSL.name(alias), this);
    }

    @Override
    public HibernateSequence as(Name alias) {
        return new HibernateSequence(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HibernateSequence rename(String name) {
        return new HibernateSequence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HibernateSequence rename(Name name) {
        return new HibernateSequence(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
