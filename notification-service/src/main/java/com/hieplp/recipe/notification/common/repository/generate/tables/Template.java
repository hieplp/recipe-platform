/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.notification.common.repository.generate.tables;


import com.hieplp.recipe.notification.common.repository.generate.Keys;
import com.hieplp.recipe.notification.common.repository.generate.Notification;
import com.hieplp.recipe.notification.common.repository.generate.tables.records.TemplateRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Template extends TableImpl<TemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>notification.template</code>
     */
    public static final Template TEMPLATE = new Template();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemplateRecord> getRecordType() {
        return TemplateRecord.class;
    }

    /**
     * The column <code>notification.template.action</code>.
     */
    public final TableField<TemplateRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>notification.template.sendVia</code>.
     */
    public final TableField<TemplateRecord, Byte> SENDVIA = createField(DSL.name("sendVia"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>notification.template.subject</code>.
     */
    public final TableField<TemplateRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>notification.template.content</code>.
     */
    public final TableField<TemplateRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private Template(Name alias, Table<TemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Template(Name alias, Table<TemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>notification.template</code> table reference
     */
    public Template(String alias) {
        this(DSL.name(alias), TEMPLATE);
    }

    /**
     * Create an aliased <code>notification.template</code> table reference
     */
    public Template(Name alias) {
        this(alias, TEMPLATE);
    }

    /**
     * Create a <code>notification.template</code> table reference
     */
    public Template() {
        this(DSL.name("template"), null);
    }

    public <O extends Record> Template(Table<O> child, ForeignKey<O, TemplateRecord> key) {
        super(child, key, TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return Notification.NOTIFICATION;
    }

    @Override
    public UniqueKey<TemplateRecord> getPrimaryKey() {
        return Keys.KEY_TEMPLATE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TemplateRecord>> getKeys() {
        return Arrays.<UniqueKey<TemplateRecord>>asList(Keys.KEY_TEMPLATE_PRIMARY);
    }

    @Override
    public Template as(String alias) {
        return new Template(DSL.name(alias), this);
    }

    @Override
    public Template as(Name alias) {
        return new Template(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Template rename(String name) {
        return new Template(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Template rename(Name name) {
        return new Template(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Byte, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
