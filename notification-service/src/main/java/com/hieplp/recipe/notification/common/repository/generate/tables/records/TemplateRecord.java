/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.notification.common.repository.generate.tables.records;


import com.hieplp.recipe.notification.common.repository.generate.tables.Template;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TemplateRecord extends UpdatableRecordImpl<TemplateRecord> implements Record4<String, Byte, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>notification.template.action</code>.
     */
    public TemplateRecord setAction(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>notification.template.action</code>.
     */
    public String getAction() {
        return (String) get(0);
    }

    /**
     * Setter for <code>notification.template.sendVia</code>.
     */
    public TemplateRecord setSendvia(Byte value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>notification.template.sendVia</code>.
     */
    public Byte getSendvia() {
        return (Byte) get(1);
    }

    /**
     * Setter for <code>notification.template.subject</code>.
     */
    public TemplateRecord setSubject(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>notification.template.subject</code>.
     */
    public String getSubject() {
        return (String) get(2);
    }

    /**
     * Setter for <code>notification.template.content</code>.
     */
    public TemplateRecord setContent(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>notification.template.content</code>.
     */
    public String getContent() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, Byte> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Byte, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, Byte, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Template.TEMPLATE.ACTION;
    }

    @Override
    public Field<Byte> field2() {
        return Template.TEMPLATE.SENDVIA;
    }

    @Override
    public Field<String> field3() {
        return Template.TEMPLATE.SUBJECT;
    }

    @Override
    public Field<String> field4() {
        return Template.TEMPLATE.CONTENT;
    }

    @Override
    public String component1() {
        return getAction();
    }

    @Override
    public Byte component2() {
        return getSendvia();
    }

    @Override
    public String component3() {
        return getSubject();
    }

    @Override
    public String component4() {
        return getContent();
    }

    @Override
    public String value1() {
        return getAction();
    }

    @Override
    public Byte value2() {
        return getSendvia();
    }

    @Override
    public String value3() {
        return getSubject();
    }

    @Override
    public String value4() {
        return getContent();
    }

    @Override
    public TemplateRecord value1(String value) {
        setAction(value);
        return this;
    }

    @Override
    public TemplateRecord value2(Byte value) {
        setSendvia(value);
        return this;
    }

    @Override
    public TemplateRecord value3(String value) {
        setSubject(value);
        return this;
    }

    @Override
    public TemplateRecord value4(String value) {
        setContent(value);
        return this;
    }

    @Override
    public TemplateRecord values(String value1, Byte value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TemplateRecord
     */
    public TemplateRecord() {
        super(Template.TEMPLATE);
    }

    /**
     * Create a detached, initialised TemplateRecord
     */
    public TemplateRecord(String action, Byte sendvia, String subject, String content) {
        super(Template.TEMPLATE);

        setAction(action);
        setSendvia(sendvia);
        setSubject(subject);
        setContent(content);
    }
}
