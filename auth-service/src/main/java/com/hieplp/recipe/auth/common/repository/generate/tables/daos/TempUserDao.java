/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.auth.common.repository.generate.tables.daos;


import com.hieplp.recipe.auth.common.repository.generate.tables.TempUser;
import com.hieplp.recipe.auth.common.repository.generate.tables.records.TempUserRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TempUserDao extends DAOImpl<TempUserRecord, com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser, String> {

    /**
     * Create a new TempUserDao without any configuration
     */
    public TempUserDao() {
        super(TempUser.TEMP_USER, com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser.class);
    }

    /**
     * Create a new TempUserDao with an attached configuration
     */
    public TempUserDao(Configuration configuration) {
        super(TempUser.TEMP_USER, com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser.class, configuration);
    }

    @Override
    public String getId(com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser object) {
        return object.getUserid();
    }

    /**
     * Fetch records that have <code>userId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfUserid(String lowerInclusive, String upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userId IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByUserid(String... values) {
        return fetch(TempUser.TEMP_USER.USERID, values);
    }

    /**
     * Fetch a unique record that has <code>userId = value</code>
     */
    public com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser fetchOneByUserid(String value) {
        return fetchOne(TempUser.TEMP_USER.USERID, value);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByUsername(String... values) {
        return fetch(TempUser.TEMP_USER.USERNAME, values);
    }

    /**
     * Fetch records that have <code>fullName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfFullname(String lowerInclusive, String upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.FULLNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fullName IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByFullname(String... values) {
        return fetch(TempUser.TEMP_USER.FULLNAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByEmail(String... values) {
        return fetch(TempUser.TEMP_USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfStatus(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByStatus(Byte... values) {
        return fetch(TempUser.TEMP_USER.STATUS, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfPassword(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByPassword(byte[]... values) {
        return fetch(TempUser.TEMP_USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>salt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfSalt(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.SALT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>salt IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchBySalt(byte[]... values) {
        return fetch(TempUser.TEMP_USER.SALT, values);
    }

    /**
     * Fetch records that have <code>createdBy BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfCreatedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.CREATEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdBy IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByCreatedby(String... values) {
        return fetch(TempUser.TEMP_USER.CREATEDBY, values);
    }

    /**
     * Fetch records that have <code>createdAt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfCreatedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.CREATEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>createdAt IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByCreatedat(LocalDateTime... values) {
        return fetch(TempUser.TEMP_USER.CREATEDAT, values);
    }

    /**
     * Fetch records that have <code>modifiedBy BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfModifiedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.MODIFIEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modifiedBy IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByModifiedby(String... values) {
        return fetch(TempUser.TEMP_USER.MODIFIEDBY, values);
    }

    /**
     * Fetch records that have <code>modifiedAt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchRangeOfModifiedat(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TempUser.TEMP_USER.MODIFIEDAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modifiedAt IN (values)</code>
     */
    public List<com.hieplp.recipe.auth.common.repository.generate.tables.pojos.TempUser> fetchByModifiedat(LocalDateTime... values) {
        return fetch(TempUser.TEMP_USER.MODIFIEDAT, values);
    }
}
