/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.auth.common.repository.generate.tables;


import com.hieplp.recipe.auth.common.repository.generate.Authentication;
import com.hieplp.recipe.auth.common.repository.generate.Keys;
import com.hieplp.recipe.auth.common.repository.generate.tables.records.OtpRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Otp extends TableImpl<OtpRecord> {

    /**
     * The reference instance of <code>authentication.otp</code>
     */
    public static final Otp OTP = new Otp();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>authentication.otp.otpId</code>.
     */
    public final TableField<OtpRecord, String> OTPID = createField(DSL.name("otpId"), SQLDataType.VARCHAR(100).nullable(false), this, "");
    /**
     * The column <code>authentication.otp.sendTo</code>.
     */
    public final TableField<OtpRecord, String> SENDTO = createField(DSL.name("sendTo"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>authentication.otp.otpCode</code>.
     */
    public final TableField<OtpRecord, String> OTPCODE = createField(DSL.name("otpCode"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>authentication.otp.type</code>.
     */
    public final TableField<OtpRecord, Byte> TYPE = createField(DSL.name("type"), SQLDataType.TINYINT.defaultValue(DSL.inline("NULL", SQLDataType.TINYINT)), this, "");
    /**
     * The column <code>authentication.otp.status</code>.
     */
    public final TableField<OtpRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.defaultValue(DSL.inline("NULL", SQLDataType.TINYINT)), this, "");
    /**
     * The column <code>authentication.otp.issuedAt</code>.
     */
    public final TableField<OtpRecord, LocalDateTime> ISSUEDAT = createField(DSL.name("issuedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>authentication.otp.expiredAt</code>.
     */
    public final TableField<OtpRecord, LocalDateTime> EXPIREDAT = createField(DSL.name("expiredAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>authentication.otp.createdAt</code>.
     */
    public final TableField<OtpRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>authentication.otp.createdBy</code>.
     */
    public final TableField<OtpRecord, String> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>authentication.otp.modifiedAt</code>.
     */
    public final TableField<OtpRecord, LocalDateTime> MODIFIEDAT = createField(DSL.name("modifiedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>authentication.otp.modifiedBy</code>.
     */
    public final TableField<OtpRecord, String> MODIFIEDBY = createField(DSL.name("modifiedBy"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    private Otp(Name alias, Table<OtpRecord> aliased) {
        this(alias, aliased, null);
    }

    private Otp(Name alias, Table<OtpRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>authentication.otp</code> table reference
     */
    public Otp(String alias) {
        this(DSL.name(alias), OTP);
    }

    /**
     * Create an aliased <code>authentication.otp</code> table reference
     */
    public Otp(Name alias) {
        this(alias, OTP);
    }

    /**
     * Create a <code>authentication.otp</code> table reference
     */
    public Otp() {
        this(DSL.name("otp"), null);
    }

    public <O extends Record> Otp(Table<O> child, ForeignKey<O, OtpRecord> key) {
        super(child, key, OTP);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtpRecord> getRecordType() {
        return OtpRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Authentication.AUTHENTICATION;
    }

    @Override
    public UniqueKey<OtpRecord> getPrimaryKey() {
        return Keys.KEY_OTP_PRIMARY;
    }

    @Override
    public List<UniqueKey<OtpRecord>> getKeys() {
        return Arrays.<UniqueKey<OtpRecord>>asList(Keys.KEY_OTP_PRIMARY);
    }

    @Override
    public Otp as(String alias) {
        return new Otp(DSL.name(alias), this);
    }

    @Override
    public Otp as(Name alias) {
        return new Otp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Otp rename(String name) {
        return new Otp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Otp rename(Name name) {
        return new Otp(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, Byte, Byte, LocalDateTime, LocalDateTime, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
