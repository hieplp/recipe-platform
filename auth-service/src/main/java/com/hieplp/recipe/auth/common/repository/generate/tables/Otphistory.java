/*
 * This file is generated by jOOQ.
 */
package com.hieplp.recipe.auth.common.repository.generate.tables;


import com.hieplp.recipe.auth.common.repository.generate.Authentication;
import com.hieplp.recipe.auth.common.repository.generate.Keys;
import com.hieplp.recipe.auth.common.repository.generate.tables.records.OtphistoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Otphistory extends TableImpl<OtphistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>authentication.otpHistory</code>
     */
    public static final Otphistory OTPHISTORY = new Otphistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtphistoryRecord> getRecordType() {
        return OtphistoryRecord.class;
    }

    /**
     * The column <code>authentication.otpHistory.otpHistoryId</code>.
     */
    public final TableField<OtphistoryRecord, String> OTPHISTORYID = createField(DSL.name("otpHistoryId"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>authentication.otpHistory.otpId</code>.
     */
    public final TableField<OtphistoryRecord, String> OTPID = createField(DSL.name("otpId"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>authentication.otpHistory.otpCode</code>.
     */
    public final TableField<OtphistoryRecord, String> OTPCODE = createField(DSL.name("otpCode"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>authentication.otpHistory.status</code>.
     */
    public final TableField<OtphistoryRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.defaultValue(DSL.inline("NULL", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>authentication.otpHistory.type</code>.
     */
    public final TableField<OtphistoryRecord, Byte> TYPE = createField(DSL.name("type"), SQLDataType.TINYINT.defaultValue(DSL.inline("NULL", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>authentication.otpHistory.createdBy</code>.
     */
    public final TableField<OtphistoryRecord, String> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>authentication.otpHistory.createdAt</code>.
     */
    public final TableField<OtphistoryRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>authentication.otpHistory.modifiedBy</code>.
     */
    public final TableField<OtphistoryRecord, String> MODIFIEDBY = createField(DSL.name("modifiedBy"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>authentication.otpHistory.modifiedAt</code>.
     */
    public final TableField<OtphistoryRecord, LocalDateTime> MODIFIEDAT = createField(DSL.name("modifiedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    private Otphistory(Name alias, Table<OtphistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Otphistory(Name alias, Table<OtphistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>authentication.otpHistory</code> table reference
     */
    public Otphistory(String alias) {
        this(DSL.name(alias), OTPHISTORY);
    }

    /**
     * Create an aliased <code>authentication.otpHistory</code> table reference
     */
    public Otphistory(Name alias) {
        this(alias, OTPHISTORY);
    }

    /**
     * Create a <code>authentication.otpHistory</code> table reference
     */
    public Otphistory() {
        this(DSL.name("otpHistory"), null);
    }

    public <O extends Record> Otphistory(Table<O> child, ForeignKey<O, OtphistoryRecord> key) {
        super(child, key, OTPHISTORY);
    }

    @Override
    public Schema getSchema() {
        return Authentication.AUTHENTICATION;
    }

    @Override
    public UniqueKey<OtphistoryRecord> getPrimaryKey() {
        return Keys.KEY_OTPHISTORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<OtphistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<OtphistoryRecord>>asList(Keys.KEY_OTPHISTORY_PRIMARY);
    }

    @Override
    public Otphistory as(String alias) {
        return new Otphistory(DSL.name(alias), this);
    }

    @Override
    public Otphistory as(Name alias) {
        return new Otphistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Otphistory rename(String name) {
        return new Otphistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Otphistory rename(Name name) {
        return new Otphistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, Byte, Byte, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
